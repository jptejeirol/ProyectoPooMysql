package view;

import controller.implement.Item;
import controller.implement.RooMades;
import controller.implement.Room;
import controller.implement.RoomJFX;
import model.services.ServicesItem;
import model.services.ServicesRoom;
import model.services.ServicesRoomJFX;
import model.services.ServicesUsuario;
import java.util.List;

/**
 *
 * @author Juan Pablo Tejeiro, Santiago Villareal, Juan José Hernandez, Sergio Nicolas Vanegas;
 * Grupo Roomade 
 * 
 */

import javax.swing.table.DefaultTableModel;


public class MisDiseños extends javax.swing.JFrame {
    
    
    
    
    
    Item item = null;
    Room room = null;
    RoomJFX roomJfX = null;

    public MisDiseños() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        panelDiseños = new javax.swing.JPanel();
        textoDiseños = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        scrollOpciones = new javax.swing.JScrollPane();
        listaOpciones = new javax.swing.JList<>();
        scrollTabla = new javax.swing.JScrollPane();
        tablaMostrar = new javax.swing.JTable();
        botonVolver = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(245, 245, 220));
        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelDiseños.setBackground(new java.awt.Color(126, 188, 137));

        textoDiseños.setFont(new java.awt.Font("Roboto Black", 0, 36)); // NOI18N
        textoDiseños.setForeground(new java.awt.Color(255, 245, 255));
        textoDiseños.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textoDiseños.setText("Mis Diseños");

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Roboto Black", 2, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/roomade/logochiquito.png"))); // NOI18N
        jLabel3.setText("RooMade");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout panelDiseñosLayout = new javax.swing.GroupLayout(panelDiseños);
        panelDiseños.setLayout(panelDiseñosLayout);
        panelDiseñosLayout.setHorizontalGroup(
            panelDiseñosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDiseñosLayout.createSequentialGroup()
                .addContainerGap(298, Short.MAX_VALUE)
                .addComponent(textoDiseños)
                .addGap(151, 151, 151)
                .addComponent(jLabel3)
                .addGap(17, 17, 17))
        );
        panelDiseñosLayout.setVerticalGroup(
            panelDiseñosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDiseñosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(textoDiseños, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addComponent(jLabel3))
        );

        mainPanel.add(panelDiseños, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 60));

        listaOpciones.setBackground(new java.awt.Color(245, 245, 220));
        listaOpciones.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        listaOpciones.setForeground(new java.awt.Color(102, 102, 102));
        listaOpciones.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Items", "Rooms", "RooMades" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listaOpciones.setToolTipText("");
        listaOpciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaOpcionesMouseClicked(evt);
            }
        });
        scrollOpciones.setViewportView(listaOpciones);

        mainPanel.add(scrollOpciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 80, 60));

        tablaMostrar.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        tablaMostrar.setForeground(new java.awt.Color(102, 102, 102));
        tablaMostrar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Usuario", "Room", "Base", "Altura", "Profundidad", "# De Objetos"
            }
        ));
        tablaMostrar.setGridColor(new java.awt.Color(102, 102, 102));
        tablaMostrar.setSelectionForeground(new java.awt.Color(102, 102, 102));
        tablaMostrar.setShowGrid(true);
        scrollTabla.setViewportView(tablaMostrar);

        mainPanel.add(scrollTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 660, 370));

        botonVolver.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        botonVolver.setForeground(new java.awt.Color(104, 104, 104));
        botonVolver.setText("Volver...");
        botonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVolverActionPerformed(evt);
            }
        });
        mainPanel.add(botonVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, -1, -1));

        jButton1.setText("Eliminar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarButtomActionPerformed(evt);
            }
        });
        mainPanel.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 460, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaOpcionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaOpcionesMouseClicked
        int indiceLista = listaOpciones.getSelectedIndex();
        System.out.println(indiceLista);
        ServicesRoomJFX servRoomJFX = servRoomJFX = new ServicesRoomJFX();
        List<RoomJFX> rooms = servRoomJFX.getRoomsJFXByUsuario(ServicesUsuario.getUsuario());
        
        
        DefaultTableModel tabla = (DefaultTableModel) tablaMostrar.getModel();
        tabla.setRowCount(0);
        
        
        switch (indiceLista) {
            case 0:
                ServicesItem servItem= new ServicesItem();
                List<Item> items = servItem.getItemsByUsuario(ServicesUsuario.getUsuario());
                
                for (int i = 0; i < items.size(); i++) {
                    tabla.setColumnIdentifiers(new Object[]{"Usuario", "Item", "Base", "Altura", "Profundidad", "Aplica"});
                    Item itemm = new Item(items.get(i).getNombreObjeto(), items.get(i).getBase(), items.get(i).getAltura(), items.get(i).getProfundidad());
                    
                    tabla.addRow(new Object[]{
                        ServicesUsuario.getUsuario(),
                        itemm.getNombreObjeto(),
                        itemm.getBase(),
                        itemm.getAltura(),
                        itemm.getProfundidad(),
                        "No aplica"
                    });
                }   break;
            case 1:
                ServicesRoom servRoom= new ServicesRoom();
                List<Room> roomss = servRoom.getRoomsByUsuario(ServicesUsuario.getUsuario());
                for (int i = 0; i < roomss.size(); i++) {
                    tabla.setColumnIdentifiers(new Object[]{"Usuario", "Room", "Base", "Altura", "Profundidad", "Aplica"});
                    Room rooom = new Room(roomss.get(i).getNombreObjeto(), roomss.get(i).getBase(), roomss.get(i).getAltura(), roomss.get(i).getProfundidad());
                    tabla.addRow(new Object[]{
                        ServicesUsuario.getUsuario(),
                        rooom.getNombreObjeto(),
                        rooom.getBase(),
                        rooom.getAltura(),
                        rooom.getProfundidad(),
                        "No aplica"
                    });
                }
                break;
            case 2:
                // Obtener la lista de RoomJFX del usuario
                // Crear la instancia de RooMades con la lista completa
                RooMades roomMades = new RooMades(rooms);
                

                // Recorrer los datos de cada RoomJFX y agregar una fila por cada uno
                for (int i = 0; i < rooms.size(); i++) {
                    tabla.setColumnIdentifiers(new Object[]{"Usuario", "Room", "Base", "Altura", "Profundidad", "Aplica"});
                    // Agregar una fila por cada RoomJFX
                    tabla.addRow(new Object[]{
                        ServicesUsuario.getUsuario(),               // Usuario
                        roomMades.getNombres().get(i),              // Nombre del cuarto
                        roomMades.getBases().get(i),                // Base del cuarto
                        roomMades.getAlturas().get(i),              // Altura del cuarto
                        roomMades.getProfundidades().get(i),        // Profundidad del cuarto
                        roomMades.getNumerosDeObjetos().get(i)      // Número de objetos en el cuarto
                    });
                }
                break;       
            default:
                break;
        }
    }//GEN-LAST:event_listaOpcionesMouseClicked

    private void botonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVolverActionPerformed
        Menu menu = new Menu();
        menu.setVisible(true);
        menu.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_botonVolverActionPerformed

    private void EliminarButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarButtomActionPerformed
        DefaultTableModel model = (DefaultTableModel) tablaMostrar.getModel();
        int[] selectedRows = tablaMostrar.getSelectedRows(); // Obtener filas seleccionadas
        ServicesRoom servRoom= new ServicesRoom();
        ServicesRoomJFX servRoomJFX = servRoomJFX = new ServicesRoomJFX();
        ServicesItem servItem= new ServicesItem();
        List<RoomJFX> rooms = servRoomJFX.getRoomsJFXByUsuario(ServicesUsuario.getUsuario());
        List<Item> items = servItem.getItemsByUsuario(ServicesUsuario.getUsuario());
        List<Room> roomss = servRoom.getRoomsByUsuario(ServicesUsuario.getUsuario());

        if (selectedRows.length > 0) {
            int indiceLista = listaOpciones.getSelectedIndex();
            String usuario = ServicesUsuario.getUsuario();

            for (int i = selectedRows.length - 1; i >= 0; i--) {
                int selectedRow = selectedRows[i];

                // Dependiendo de la opción seleccionada, crear el objeto y eliminarlo
                switch (indiceLista) {
                    case 0: // Eliminar un Item
                        // Crear un objeto Item con los datos de la fila seleccionada
                        item = new Item(items.get(selectedRow).getNombreObjeto(), items.get(selectedRow).getBase(), items.get(selectedRow).getAltura(), items.get(selectedRow).getProfundidad());
                        servItem.eliminar_item(usuario, item);
                        break;

                    case 1: // Eliminar un Room
                        room = new Room(roomss.get(selectedRow).getNombreObjeto(), roomss.get(selectedRow).getBase(), roomss.get(selectedRow).getAltura(), roomss.get(selectedRow).getProfundidad());

                        servRoom.eliminar_room(usuario, room);
                        break;

                    case 2: // Eliminar un RoomJFX
                        roomJfX = new RoomJFX(rooms.get(selectedRow).getNombre(), rooms.get(selectedRow).getHash());
                        servRoomJFX.eliminar_diseño(usuario, roomJfX );
                        break;
                }

                // Eliminar la fila de la tabla después de eliminar de la base de datos
                model.removeRow(selectedRow);
            }

            System.out.println("Se eliminaron los elementos seleccionados.");
        } else {
            System.out.println("No se seleccionó ningún elemento.");
        }
    }//GEN-LAST:event_EliminarButtomActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonVolver;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> listaOpciones;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel panelDiseños;
    private javax.swing.JScrollPane scrollOpciones;
    private javax.swing.JScrollPane scrollTabla;
    private javax.swing.JTable tablaMostrar;
    private javax.swing.JLabel textoDiseños;
    // End of variables declaration//GEN-END:variables
}
